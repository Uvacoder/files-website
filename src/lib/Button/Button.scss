@use "src/styles/mixins" as *;

/*
 * Button Element
 */

.button {
    @include flex($inline: true, $align: center);
    -webkit-user-drag: none;
    box-sizing: border-box;
    user-select: none;
    text-align: left;
    text-decoration: none;
    word-break: break-word;
    cursor: default;
    border: 1px solid;
    border-radius: var(--control-corner-radius);
    padding: 5px 11px 6px 11px;
    transition: 83ms ease background-color,
                83ms ease box-shadow;
    font: {
        size: var(--control-font-size);
        weight: normal;
    }

    // Button styles
    &.style- {

        // "Default" style
        &standard {
            background-clip: padding-box;
            color: var(--text-color-primary);
            background-color: var(--control-color-default);
            border-color: var(--control-stroke-default);
            border-top-color: var(--control-stroke-secondary);

            // Interaction states
            // Hover state
            &:hover {
                background-color: var(--control-color-secondary);
            }

            // Active (pressed) state
            &:active {
                background-color: var(--control-color-tertiary);
                border-color: var(--control-stroke-default);
                color: var(--text-color-secondary);
            }

            // Disabled state
            &:disabled,
            &.disabled {
                background-color: var(--control-color-disabled);
                border-color: var(--control-stroke-default);
                color: var(--text-color-disabled);
            }
        }

        // "Accent" style
        &accent {
            color: var(--accent-text-contrast-primary);
            background-color: var(--accent-color-default);
            border-color: var(--control-accent-stroke-default);
            border-bottom-color: var(--control-accent-stroke-secondary);
            
            // Interaction states
            // Hover state
            &:hover {
                background-color: var(--accent-color-secondary);
            }

            // Active (pressed) state
            &:active {
                color: var(--accent-text-contrast-secondary);
                background-color: var(--accent-color-tertiary);
                border-color: transparent;
            }

            // Disabled state
            &:disabled,
            &.disabled {
                color: var(--accent-text-contrast-disabled);
                background-color: var(--accent-color-disabled);
                border-color: transparent;
            }
        }
    }
}

/*
 * Light-theme specific styles
 * ==========================================
 * The borders on default buttons are
 * slightly different on light theme and
 * therefore must be styled accordingly.
*/

@media (prefers-color-scheme: light) {
    .button.style-standard {
        border-color: var(--control-stroke-default);
        border-bottom-color: var(--control-stroke-secondary);
    }
}

/*
 * Split buttons
 * ==========================================
 * Wrapper element for styling multiple
 * <Button /> components as a singular split
 * style button.
*/

// NOTE: !important is required because we are using scoped styles
:global {
    .split-button {
        @include flex($align: center);
        .button {
            height: 100%;
            border-radius: 0 !important;
        }
        > .button:first-child,
        > *:first-child .button {
            border-radius: var(--control-corner-radius) 0 0 var(--control-corner-radius) !important;
        }
        > .button:last-child,
        > *:last-child .button {
            border-radius: 0 var(--control-corner-radius) var(--control-corner-radius) 0 !important;
        }
    }
}